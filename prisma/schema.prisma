generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  name      String      @unique
  slug      String      @unique
  type      TagTypeEnum @default(ALL)
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  blogs     Blog[]      @relation("BlogToTag")
  notes     Note[]      @relation("NoteToTag")
  snippets  Snippet[]   @relation("SnippetToTag")
}

model Blog {
  title       String   @unique
  slug        String   @unique
  description String
  body        String
  cover       String?
  author      String?
  published   Boolean  @default(false)
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]    @relation("BlogToTag")
}

model Snippet {
  title       String   @unique
  slug        String   @unique
  description String
  body        String
  published   Boolean  @default(false)
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]    @relation("SnippetToTag")
}

model Note {
  body      String
  published Boolean  @default(false)
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]    @relation("NoteToTag")
}

model photos {
  id                          String    @id @db.VarChar(8)
  url                         String    @db.VarChar(255)
  extension                   String    @db.VarChar(255)
  aspect_ratio                Float?    @default(1.5) @db.Real
  blur_data                   String?
  title                       String?   @db.VarChar(255)
  caption                     String?
  semantic_description        String?
  tags                        String[]  @db.VarChar(255)
  make                        String?   @db.VarChar(255)
  model                       String?   @db.VarChar(255)
  focal_length                Int?      @db.SmallInt
  focal_length_in_35mm_format Int?      @db.SmallInt
  lens_make                   String?   @db.VarChar(255)
  lens_model                  String?   @db.VarChar(255)
  f_number                    Float?    @db.Real
  iso                         Int?      @db.SmallInt
  exposure_time               Float?
  exposure_compensation       Float?    @db.Real
  location_name               String?   @db.VarChar(255)
  latitude                    Float?
  longitude                   Float?
  film_simulation             String?   @db.VarChar(255)
  priority_order              Float?    @db.Real
  taken_at                    DateTime  @db.Timestamptz(6)
  taken_at_naive              String    @db.VarChar(255)
  hidden                      Boolean?
  updated_at                  DateTime? @default(now()) @db.Timestamptz(6)
  created_at                  DateTime? @default(now()) @db.Timestamptz(6)
}

enum TagTypeEnum {
  ALL
  BLOG
  SNIPPET
  NOTE
}
